// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                    String    @id @default(cuid())
  name                  String
  slug                  String    @unique
  domain                String?   @unique
  logo                  String?
  settings              Json?
  registrationCode      String?   @unique
  registrationCodeExpiresAt DateTime?
  isActive              Boolean   @default(true)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  users         User[]
  invitations   Invitation[]
  services      Service[]
  professionals Professional[]
  appointments  Appointment[]

  @@map("companies")
}

model User {
  id          String   @id @default(cuid())
  email       String
  password    String
  firstName   String
  lastName    String
  avatar      String?
  role        UserRole @default(USER)
  isActive    Boolean  @default(true)
  lastLoginAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  companyId       String
  company         Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  professionalId  String? // Link to professional record if user is a professional
  professional    Professional? @relation(fields: [professionalId], references: [id], onDelete: SetNull)

  // Unique constraint: email must be unique within the same company
  @@unique([email, companyId])
  @@map("users")
}

model Invitation {
  id        String           @id @default(cuid())
  email     String
  role      UserRole         @default(USER)
  status    InvitationStatus @default(PENDING)
  token     String           @unique
  expiresAt DateTime
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("invitations")
}

enum UserRole {
  ADMIN
  USER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  duration    Int      // Duration in minutes
  category    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  companyId       String
  company         Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  professionalId  String? // Optional: if null, it's a general company service
  professional    Professional? @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  appointments    Appointment[]

  @@map("services")
}

model Professional {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phone       String?
  commission  Decimal  @db.Decimal(5, 2) // Commission percentage (0-100)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  companyId     String
  company       Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  appointments  Appointment[]
  services      Service[] // Services created by this professional
  users         User[] // Users linked to this professional

  @@map("professionals")
}

model Appointment {
  id          String            @id @default(cuid())
  clientName  String
  clientPhone String?
  clientEmail String?
  startTime   DateTime
  endTime     DateTime
  status      AppointmentStatus @default(PENDING)
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  companyId      String
  company        Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  serviceId      String
  service        Service      @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  professionalId String
  professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)

  @@map("appointments")
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
